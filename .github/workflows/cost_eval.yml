name: Cost Evaluation

on:
  pull_request:
    branches: 
      - main

jobs:
  cost_evaluation_job:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
    
      - name: Run cost evaluation script
        run: |
          git fetch origin
          git checkout origin/main
          cp cost.txt cost_master.txt
          cp -r benchmarks_opt benchmarks_opt_master
          git checkout -
              
          PR_COST_FILE="cost.txt"
          MASTER_COST_FILE="cost_master.txt"
        
          rm -f cost_tmp.txt        
          touch cost_tmp.txt

          PR_COST_ARR=($(cat "$PR_COST_FILE"))
          MASTER_COST_ARR=($(cat "$MASTER_COST_FILE"))
        
          for i in ${!PR_COST_ARR[@]}; do
            echo "Comparing line $((i+1)): PR=${PR_COST_ARR[$i]}, Master=${MASTER_COST_ARR[$i]}"
            if [ ${PR_COST_ARR[$i]} -lt ${MASTER_COST_ARR[$i]} ]; then
              echo "Lower cost on PR. Writing ${PR_COST_ARR[$i]} to temp file and copying benchmark file."
              cho ${PR_COST_ARR[$i]} >> cost_tmp.txt
              file_name=$(printf "ex%02d.v" "$((i))")
              cp benchmarks_opt/$file_name benchmarks_opt_master
            else
              echo "Lower cost in Master or costs are equal. Writing ${MASTER_COST_ARR[$i]} to temp file."
              echo ${MASTER_COST_ARR[$i]} >> cost_tmp.txt
            fi
          done
          
          echo "Moving cost_tmp.txt to cost.txt..."
          mv cost_tmp.txt cost.txt
          rm -rf benchmarks_opt
          mv benchmarks_opt_master benchmarks_opt
          statusCheck=$(git status | grep modified)
          if [[ -z "$statusCheck" ]]
          then
            echo "No changes detected"
          else
            echo "Changes detected!"
            git add .
            git commit -m 'Updated cost.txt and .v files.'
            git push origin ${GITHUB_HEAD_REF}
          fi
